# -*- coding: utf-8 -*-
"""sonar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cLySm_tNyKPv0gg1umJN4oELwniuxdaQ

# importing the libraries
"""

import numpy as np #for arrays allows faster mathematical operations
import pandas as pd # useful for data processing and analysis creating data frame
from sklearn.model_selection import train_test_split #this function is used to split train & test data
from sklearn.linear_model import LogisticRegression #used for classification tasks
from sklearn.metrics import accuracy_score #used to evaluate the model

"""Collection of data and processing"""

#loading the dataset to apandas Dataframe
sonar_data = pd.read_csv('/content/sonar data.csv', header=None)

sonar_data.head()

#number of rows and columns
sonar_data.shape

sonar_data.describe() #describe gives statistical measures of the data

sonar_data[60].value_counts()

"""M-->Mine


R-->Rock
"""

sonar_data.groupby(60).mean()

# separating data and Labels
X = sonar_data.drop(columns=60, axis=1)
Y = sonar_data[60]

print(X)
print(Y)

"""Training and test data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=1)

print(X.shape,X_train.shape,X_test.shape)

print(X_train)
print(Y_train)

#Model training -->Logistic Regression

model = LogisticRegression()

#training the logistic regression model with training data
model.fit(X_train,Y_train)

"""Model Evaluation"""

#accuracy of the training data
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print('Accuracy on training data:',training_data_accuracy)

#accuracy of test data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print('Accuracy on test data: ',test_data_accuracy)

"""Making a predictive system:"""

input_data=(0.0050,0.0017,0.0270,0.0450,0.0958,0.0830,0.0879,0.1220,0.1977,0.2282,0.2521,0.3484,0.3309,0.2614,0.1782,0.2055,0.2298,0.3545,0.6218,0.7265,0.8346,0.8268,0.8366,0.9408,0.9510,0.9801,0.9974,1.0000,0.9036,0.6409,0.3857,0.2908,0.2040,0.1653,0.1769,0.1140,0.0740,0.0941,0.0621,0.0426,0.0572,0.1068,0.1909,0.2229,0.2203,0.2265,0.1766,0.1097,0.0558,0.0142,0.0281,0.0165,0.0056,0.0010,0.0027,0.0062,0.0024,0.0063,0.0017,0.0028)
#changing the input_data to a numpy array
input_data_numpy_array=np.asarray(input_data)
# reshape the numpy array as we are predicting this for one instance
input_data_reshaped=input_data_numpy_array.reshape(1,-1)# the(1,-1) represents the data is for one instance and we want to predict for one instance
prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]=='R'):
  print('The object is a Rock')
else:
  print('The object is a mine')